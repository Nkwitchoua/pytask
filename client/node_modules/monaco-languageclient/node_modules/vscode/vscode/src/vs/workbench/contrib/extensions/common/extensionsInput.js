import { Schemas } from 'monaco-editor/esm/vs/base/common/network.js';
import { URI } from 'monaco-editor/esm/vs/base/common/uri.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { EditorInput } from '../../../common/editor/editorInput.js';
import { areSameExtensions } from '../../../../platform/extensionManagement/common/extensionManagementUtil.js';
import { join } from 'monaco-editor/esm/vs/base/common/path.js';
class ExtensionsInput extends EditorInput {
    static { this.ID = 'workbench.extensions.input2'; }
    get typeId() {
        return ExtensionsInput.ID;
    }
    get capabilities() {
        return 2  | 8  | 1024 ;
    }
    get resource() {
        return ( URI.from({
            scheme: Schemas.extension,
            path: join(this._extension.identifier.id, 'extension')
        }));
    }
    constructor(_extension) {
        super();
        this._extension = _extension;
    }
    get extension() { return this._extension; }
    getName() {
        return ( localizeWithPath(
            'vs/workbench/contrib/extensions/common/extensionsInput',
            'extensionsInputName',
            "Extension: {0}",
            this._extension.displayName
        ));
    }
    matches(other) {
        if (super.matches(other)) {
            return true;
        }
        return other instanceof ExtensionsInput && areSameExtensions(this._extension.identifier, other._extension.identifier);
    }
}
export { ExtensionsInput };
