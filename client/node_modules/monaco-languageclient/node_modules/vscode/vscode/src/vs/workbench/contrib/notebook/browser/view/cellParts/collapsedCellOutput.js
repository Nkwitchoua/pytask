import { __decorate, __param } from '../../../../../../../../../external/tslib/tslib.es6.js';
import * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { EXPAND_CELL_OUTPUT_COMMAND_ID } from '../../notebookBrowser.js';
import { CellContentPart } from '../cellPart.js';
const $ = dom.$;
let CollapsedCellOutput = class CollapsedCellOutput extends CellContentPart {
    constructor(notebookEditor, cellOutputCollapseContainer, keybindingService) {
        super();
        this.notebookEditor = notebookEditor;
        const placeholder = dom.append(cellOutputCollapseContainer, $('span.expandOutputPlaceholder'));
        placeholder.textContent = ( localizeWithPath(
            'vs/workbench/contrib/notebook/browser/view/cellParts/collapsedCellOutput',
            'cellOutputsCollapsedMsg',
            "Outputs are collapsed"
        ));
        const expandIcon = dom.append(cellOutputCollapseContainer, $('span.expandOutputIcon'));
        expandIcon.classList.add(...ThemeIcon.asClassNameArray(Codicon.more));
        const keybinding = keybindingService.lookupKeybinding(EXPAND_CELL_OUTPUT_COMMAND_ID);
        if (keybinding) {
            placeholder.title = ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/collapsedCellOutput',
                'cellExpandOutputButtonLabelWithDoubleClick',
                "Double-click to expand cell output ({0})",
                keybinding.getLabel()
            ));
            cellOutputCollapseContainer.title = ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/collapsedCellOutput',
                'cellExpandOutputButtonLabel',
                "Expand Cell Output (${0})",
                keybinding.getLabel()
            ));
        }
        dom.hide(cellOutputCollapseContainer);
        this._register(dom.addDisposableListener(expandIcon, dom.EventType.CLICK, () => this.expand()));
        this._register(dom.addDisposableListener(cellOutputCollapseContainer, dom.EventType.DBLCLICK, () => this.expand()));
    }
    expand() {
        if (!this.currentCell) {
            return;
        }
        if (!this.currentCell) {
            return;
        }
        const textModel = this.notebookEditor.textModel;
        const index = textModel.cells.indexOf(this.currentCell.model);
        if (index < 0) {
            return;
        }
        this.currentCell.isOutputCollapsed = !this.currentCell.isOutputCollapsed;
    }
};
CollapsedCellOutput = ( __decorate([
    ( __param(2, IKeybindingService))
], CollapsedCellOutput));
export { CollapsedCellOutput };
