import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { Action2, MenuId, registerAction2 } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { CHAT_CATEGORY } from './chatActions.js';
import { IChatWidgetService } from '../chat.js';
import { CONTEXT_CHAT_INPUT_HAS_TEXT, CONTEXT_CHAT_REQUEST_IN_PROGRESS } from '../../common/chatContextKeys.js';
import { IChatService } from '../../common/chatService.js';
class SubmitAction extends Action2 {
    static { this.ID = 'workbench.action.chat.submit'; }
    constructor() {
        super({
            id: SubmitAction.ID,
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/contrib/chat/browser/actions/chatExecuteActions',
                    'interactive.submit.label',
                    "Submit"
                )),
                original: 'Submit'
            },
            f1: false,
            category: CHAT_CATEGORY,
            icon: Codicon.send,
            precondition: CONTEXT_CHAT_INPUT_HAS_TEXT,
            menu: {
                id: MenuId.ChatExecute,
                when: ( CONTEXT_CHAT_REQUEST_IN_PROGRESS.negate()),
                group: 'navigation',
            },
        });
    }
    run(accessor, ...args) {
        const context = args[0];
        const widgetService = accessor.get(IChatWidgetService);
        const widget = context?.widget ?? widgetService.lastFocusedWidget;
        widget?.acceptInput(context?.inputValue);
    }
}
function registerChatExecuteActions() {
    registerAction2(SubmitAction);
    registerAction2(class CancelAction extends Action2 {
        constructor() {
            super({
                id: 'workbench.action.chat.cancel',
                title: {
                    value: ( localizeWithPath(
                        'vs/workbench/contrib/chat/browser/actions/chatExecuteActions',
                        'interactive.cancel.label',
                        "Cancel"
                    )),
                    original: 'Cancel'
                },
                f1: false,
                category: CHAT_CATEGORY,
                icon: Codicon.debugStop,
                menu: {
                    id: MenuId.ChatExecute,
                    when: CONTEXT_CHAT_REQUEST_IN_PROGRESS,
                    group: 'navigation',
                }
            });
        }
        run(accessor, ...args) {
            const context = args[0];
            if (!context.widget) {
                return;
            }
            const chatService = accessor.get(IChatService);
            if (context.widget.viewModel) {
                chatService.cancelCurrentRequestForSession(context.widget.viewModel.sessionId);
            }
        }
    });
}
export { SubmitAction, registerChatExecuteActions };
