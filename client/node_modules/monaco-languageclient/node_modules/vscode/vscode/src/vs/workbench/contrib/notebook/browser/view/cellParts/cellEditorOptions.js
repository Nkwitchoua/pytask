import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { registerAction2, Action2, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { Extensions } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { ActiveEditorContext } from '../../../../../common/contextkeys.js';
import { NOTEBOOK_ACTIONS_CATEGORY, NotebookMultiCellAction } from '../../controller/coreActions.js';
import { NOTEBOOK_EDITOR_FOCUSED, NOTEBOOK_CELL_LINE_NUMBERS } from '../../../common/notebookContextKeys.js';
import { CellContentPart } from '../cellPart.js';
import { NOTEBOOK_EDITOR_ID } from '../../../common/notebookCommon.js';
class CellEditorOptions extends CellContentPart {
    constructor(base, notebookOptions, configurationService) {
        super();
        this.base = base;
        this.notebookOptions = notebookOptions;
        this.configurationService = configurationService;
        this._lineNumbers = 'inherit';
        this._onDidChange = this._register(( new Emitter()));
        this.onDidChange = this._onDidChange.event;
        this._register(base.onDidChange(() => {
            this._recomputeOptions();
        }));
        this._value = this._computeEditorOptions();
    }
    updateState(element, e) {
        if (e.cellLineNumberChanged) {
            this.setLineNumbers(element.lineNumbers);
        }
    }
    _recomputeOptions() {
        this._value = this._computeEditorOptions();
        this._onDidChange.fire();
    }
    _computeEditorOptions() {
        const value = this.base.value;
        let cellRenderLineNumber = value.lineNumbers;
        switch (this._lineNumbers) {
            case 'inherit':
                if (this.configurationService.getValue('notebook.lineNumbers') === 'on') {
                    if (value.lineNumbers === 'off') {
                        cellRenderLineNumber = 'on';
                    }
                }
                else {
                    cellRenderLineNumber = 'off';
                }
                break;
            case 'on':
                if (value.lineNumbers === 'off') {
                    cellRenderLineNumber = 'on';
                }
                break;
            case 'off':
                cellRenderLineNumber = 'off';
                break;
        }
        if (value.lineNumbers !== cellRenderLineNumber) {
            return {
                ...value,
                ...{ lineNumbers: cellRenderLineNumber }
            };
        }
        else {
            return Object.assign({}, value);
        }
    }
    getUpdatedValue(internalMetadata, cellUri) {
        const options = this.getValue(internalMetadata, cellUri);
        delete options.hover;
        return options;
    }
    getValue(internalMetadata, cellUri) {
        return {
            ...this._value,
            ...{
                padding: this.notebookOptions.computeEditorPadding(internalMetadata, cellUri)
            }
        };
    }
    getDefaultValue() {
        return {
            ...this._value,
            ...{
                padding: { top: 12, bottom: 12 }
            }
        };
    }
    setLineNumbers(lineNumbers) {
        this._lineNumbers = lineNumbers;
        this._recomputeOptions();
    }
}
( Registry.as(Extensions.Configuration)).registerConfiguration({
    id: 'notebook',
    order: 100,
    type: 'object',
    'properties': {
        'notebook.lineNumbers': {
            type: 'string',
            enum: ['off', 'on'],
            default: 'off',
            markdownDescription: ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/cellEditorOptions',
                'notebook.lineNumbers',
                "Controls the display of line numbers in the cell editor."
            ))
        }
    }
});
registerAction2(class ToggleLineNumberAction extends Action2 {
    constructor() {
        super({
            id: 'notebook.toggleLineNumbers',
            title: { value: ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/cellEditorOptions',
                'notebook.toggleLineNumbers',
                "Toggle Notebook Line Numbers"
            )), original: 'Toggle Notebook Line Numbers' },
            precondition: NOTEBOOK_EDITOR_FOCUSED,
            menu: [
                {
                    id: MenuId.NotebookToolbar,
                    group: 'notebookLayout',
                    order: 2,
                    when: ( ContextKeyExpr.equals('config.notebook.globalToolbar', true))
                }
            ],
            category: NOTEBOOK_ACTIONS_CATEGORY,
            f1: true,
            toggled: {
                condition: ( ContextKeyExpr.notEquals('config.notebook.lineNumbers', 'off')),
                title: ( localizeWithPath(
                    'vs/workbench/contrib/notebook/browser/view/cellParts/cellEditorOptions',
                    'notebook.showLineNumbers',
                    "Notebook Line Numbers"
                )),
            }
        });
    }
    async run(accessor) {
        const configurationService = accessor.get(IConfigurationService);
        const renderLiNumbers = configurationService.getValue('notebook.lineNumbers') === 'on';
        if (renderLiNumbers) {
            configurationService.updateValue('notebook.lineNumbers', 'off');
        }
        else {
            configurationService.updateValue('notebook.lineNumbers', 'on');
        }
    }
});
registerAction2(class ToggleActiveLineNumberAction extends NotebookMultiCellAction {
    constructor() {
        super({
            id: 'notebook.cell.toggleLineNumbers',
            title: ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/cellEditorOptions',
                'notebook.cell.toggleLineNumbers.title',
                "Show Cell Line Numbers"
            )),
            precondition: ( ActiveEditorContext.isEqualTo(NOTEBOOK_EDITOR_ID)),
            menu: [{
                    id: MenuId.NotebookCellTitle,
                    group: 'View',
                    order: 1
                }],
            toggled: ( ContextKeyExpr.or(( NOTEBOOK_CELL_LINE_NUMBERS.isEqualTo('on')), ( ContextKeyExpr.and(( NOTEBOOK_CELL_LINE_NUMBERS.isEqualTo('inherit')), ( ContextKeyExpr.equals('config.notebook.lineNumbers', 'on'))))))
        });
    }
    async runWithContext(accessor, context) {
        if (context.ui) {
            this.updateCell(accessor.get(IConfigurationService), context.cell);
        }
        else {
            const configurationService = accessor.get(IConfigurationService);
            context.selectedCells.forEach(cell => {
                this.updateCell(configurationService, cell);
            });
        }
    }
    updateCell(configurationService, cell) {
        const renderLineNumbers = configurationService.getValue('notebook.lineNumbers') === 'on';
        const cellLineNumbers = cell.lineNumbers;
        const currentLineNumberIsOn = cellLineNumbers === 'on' || (cellLineNumbers === 'inherit' && renderLineNumbers);
        if (currentLineNumberIsOn) {
            cell.lineNumbers = 'off';
        }
        else {
            cell.lineNumbers = 'on';
        }
    }
});
export { CellEditorOptions };
