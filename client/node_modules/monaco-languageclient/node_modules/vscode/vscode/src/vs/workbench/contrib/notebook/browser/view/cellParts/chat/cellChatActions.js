import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { registerAction2, MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { CTX_INLINE_CHAT_FOCUSED, CTX_INLINE_CHAT_RESPONSE_TYPES, CTX_INLINE_CHAT_LAST_RESPONSE_TYPE, CTX_INLINE_CHAT_HAS_PROVIDER } from '../../../../../inlineChat/common/inlineChat.js';
import { NotebookCellAction, NotebookAction } from '../../../controller/coreActions.js';
import { insertNewCell } from '../../../controller/insertCellActions.js';
import { CTX_NOTEBOOK_CELL_CHAT_FOCUSED, MENU_CELL_CHAT_WIDGET, CTX_NOTEBOOK_CHAT_HAS_ACTIVE_REQUEST, NotebookCellChatController, MENU_CELL_CHAT_WIDGET_TOOLBAR, MENU_CELL_CHAT_WIDGET_STATUS, MENU_CELL_CHAT_WIDGET_FEEDBACK } from './cellChatController.js';
import { NotebookSetting, CellKind } from '../../../../common/notebookCommon.js';
import { NOTEBOOK_CELL_LIST_FOCUSED, NOTEBOOK_EDITOR_EDITABLE } from '../../../../common/notebookContextKeys.js';
registerAction2(class extends NotebookCellAction {
    constructor() {
        super({
            id: 'notebook.cell.chat.accept',
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/contrib/notebook/browser/view/cellParts/chat/cellChatActions',
                    'notebook.cell.chat.accept',
                    "Make Request"
                )),
                original: 'Make Request'
            },
            icon: Codicon.send,
            keybinding: {
                when: ( ContextKeyExpr.and(CTX_NOTEBOOK_CELL_CHAT_FOCUSED, CTX_INLINE_CHAT_FOCUSED)),
                weight: 0  + 7,
                primary: 3
            },
            menu: {
                id: MENU_CELL_CHAT_WIDGET,
                group: 'main',
                order: 1,
                when: ( CTX_NOTEBOOK_CHAT_HAS_ACTIVE_REQUEST.negate())
            }
        });
    }
    async runWithContext(accessor, context) {
        const ctrl = NotebookCellChatController.get(context.cell);
        if (!ctrl) {
            return;
        }
        ctrl.acceptInput();
    }
});
registerAction2(class extends NotebookCellAction {
    constructor() {
        super({
            id: 'notebook.cell.chat.stop',
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/contrib/notebook/browser/view/cellParts/chat/cellChatActions',
                    'notebook.cell.chat.stop',
                    "Stop Request"
                )),
                original: 'Make Request'
            },
            icon: Codicon.debugStop,
            menu: {
                id: MENU_CELL_CHAT_WIDGET,
                group: 'main',
                order: 1,
                when: CTX_NOTEBOOK_CHAT_HAS_ACTIVE_REQUEST
            }
        });
    }
    async runWithContext(accessor, context) {
        const ctrl = NotebookCellChatController.get(context.cell);
        if (!ctrl) {
            return;
        }
        ctrl.cancelCurrentRequest(false);
    }
});
registerAction2(class extends NotebookCellAction {
    constructor() {
        super({
            id: 'notebook.cell.chat.close',
            title: {
                value: ( localizeWithPath(
                    'vs/workbench/contrib/notebook/browser/view/cellParts/chat/cellChatActions',
                    'notebook.cell.chat.close',
                    "Close Chat"
                )),
                original: 'Close Chat'
            },
            icon: Codicon.close,
            menu: {
                id: MENU_CELL_CHAT_WIDGET_TOOLBAR,
                group: 'main',
                order: 2
            }
        });
    }
    async runWithContext(accessor, context) {
        const ctrl = NotebookCellChatController.get(context.cell);
        if (!ctrl) {
            return;
        }
        ctrl.dismiss(false);
    }
});
registerAction2(class extends NotebookAction {
    constructor() {
        super({
            id: 'notebook.cell.chat.acceptChanges',
            title: { value: ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/chat/cellChatActions',
                'apply1',
                'Accept Changes'
            )), original: 'Accept Changes' },
            shortTitle: ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/chat/cellChatActions',
                'apply2',
                'Accept'
            )),
            icon: Codicon.check,
            tooltip: ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/chat/cellChatActions',
                'apply1',
                'Accept Changes'
            )),
            keybinding: {
                when: ( ContextKeyExpr.and(CTX_NOTEBOOK_CELL_CHAT_FOCUSED, CTX_INLINE_CHAT_FOCUSED)),
                weight: 100  + 10,
                primary: 2048  | 3 ,
            },
            menu: [
                {
                    id: MENU_CELL_CHAT_WIDGET_STATUS,
                    group: 'inline',
                    order: 0,
                    when: ( CTX_INLINE_CHAT_RESPONSE_TYPES.notEqualsTo("onlyMessages" )),
                }
            ]
        });
    }
    async runWithContext(accessor, context) {
        const ctrl = NotebookCellChatController.get(context.cell);
        if (!ctrl) {
            return;
        }
        ctrl.acceptSession();
    }
});
registerAction2(class extends NotebookCellAction {
    constructor() {
        super({
            id: 'notebook.cell.chat.discard',
            title: ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/chat/cellChatActions',
                'discard',
                'Discard'
            )),
            icon: Codicon.discard,
            keybinding: {
                when: ( ContextKeyExpr.and(
                    CTX_NOTEBOOK_CELL_CHAT_FOCUSED,
                    CTX_INLINE_CHAT_FOCUSED,
                    NOTEBOOK_CELL_LIST_FOCUSED
                )),
                weight: 100 ,
                primary: 9
            },
            menu: {
                id: MENU_CELL_CHAT_WIDGET_STATUS,
                group: 'main',
                order: 1
            }
        });
    }
    async runWithContext(accessor, context) {
        const ctrl = NotebookCellChatController.get(context.cell);
        if (!ctrl) {
            return;
        }
        ctrl.dismiss(true);
    }
});
registerAction2(class extends NotebookCellAction {
    constructor() {
        super({
            id: 'notebook.cell.feedbackHelpful',
            title: ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/chat/cellChatActions',
                'feedback.helpful',
                'Helpful'
            )),
            icon: Codicon.thumbsup,
            menu: {
                id: MENU_CELL_CHAT_WIDGET_FEEDBACK,
                group: 'inline',
                order: 1,
                when: ( CTX_INLINE_CHAT_LAST_RESPONSE_TYPE.notEqualsTo(undefined)),
            }
        });
    }
    async runWithContext(accessor, context) {
        const ctrl = NotebookCellChatController.get(context.cell);
        if (!ctrl) {
            return;
        }
        ctrl.feedbackLast(1 );
    }
});
registerAction2(class extends NotebookCellAction {
    constructor() {
        super({
            id: 'notebook.cell.feedbackUnhelpful',
            title: ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/chat/cellChatActions',
                'feedback.unhelpful',
                'Unhelpful'
            )),
            icon: Codicon.thumbsdown,
            menu: {
                id: MENU_CELL_CHAT_WIDGET_FEEDBACK,
                group: 'inline',
                order: 2,
                when: ( CTX_INLINE_CHAT_LAST_RESPONSE_TYPE.notEqualsTo(undefined)),
            }
        });
    }
    async runWithContext(accessor, context) {
        const ctrl = NotebookCellChatController.get(context.cell);
        if (!ctrl) {
            return;
        }
        ctrl.feedbackLast(0 );
    }
});
registerAction2(class extends NotebookCellAction {
    constructor() {
        super({
            id: 'notebook.cell.reportIssueForBug',
            title: ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/chat/cellChatActions',
                'feedback.reportIssueForBug',
                'Report Issue'
            )),
            icon: Codicon.report,
            menu: {
                id: MENU_CELL_CHAT_WIDGET_FEEDBACK,
                group: 'inline',
                order: 3,
                when: ( CTX_INLINE_CHAT_LAST_RESPONSE_TYPE.notEqualsTo(undefined)),
            }
        });
    }
    async runWithContext(accessor, context) {
        const ctrl = NotebookCellChatController.get(context.cell);
        if (!ctrl) {
            return;
        }
        ctrl.feedbackLast(4 );
    }
});
registerAction2(class extends NotebookCellAction {
    constructor() {
        super({
            id: 'notebook.cell.insertCodeCellWithChat',
            title: {
                value: '$(sparkle) ' + ( localizeWithPath(
                    'vs/workbench/contrib/notebook/browser/view/cellParts/chat/cellChatActions',
                    'notebookActions.menu.insertCodeCellWithChat',
                    "Generate"
                )),
                original: '$(sparkle) Generate',
            },
            tooltip: ( localizeWithPath(
                'vs/workbench/contrib/notebook/browser/view/cellParts/chat/cellChatActions',
                'notebookActions.menu.insertCodeCellWithChat.tooltip',
                "Generate Code Cell with Chat"
            )),
            menu: [
                {
                    id: MenuId.NotebookCellBetween,
                    group: 'inline',
                    order: -1,
                    when: ( ContextKeyExpr.and(( NOTEBOOK_EDITOR_EDITABLE.isEqualTo(true)), CTX_INLINE_CHAT_HAS_PROVIDER, ( ContextKeyExpr.equals(`config.${NotebookSetting.cellChat}`, true))))
                },
                {
                    id: MenuId.NotebookCellListTop,
                    group: 'inline',
                    order: -1,
                    when: ( ContextKeyExpr.and(( NOTEBOOK_EDITOR_EDITABLE.isEqualTo(true)), CTX_INLINE_CHAT_HAS_PROVIDER, ( ContextKeyExpr.equals(`config.${NotebookSetting.cellChat}`, true))))
                },
            ]
        });
    }
    async runWithContext(accessor, context) {
        const newCell = await insertNewCell(accessor, context, CellKind.Code, 'below');
        if (!newCell) {
            return;
        }
        await context.notebookEditor.focusNotebookCell(newCell, 'container');
        const ctrl = NotebookCellChatController.get(newCell);
        if (!ctrl) {
            return;
        }
        ctrl.show();
    }
});
