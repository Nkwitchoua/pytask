import * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';
import { Button } from 'monaco-editor/esm/vs/base/browser/ui/button/button.js';
import { MarkdownString } from 'monaco-editor/esm/vs/base/common/htmlContent.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { ContextKeyExpr } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
const $ = dom.$;
class ChatFollowups extends Disposable {
    constructor(container, followups, options, clickHandler, contextService) {
        super();
        this.options = options;
        this.clickHandler = clickHandler;
        this.contextService = contextService;
        const followupsContainer = dom.append(container, $('.interactive-session-followups'));
        followups.forEach(followup => this.renderFollowup(followupsContainer, followup));
    }
    renderFollowup(container, followup) {
        if (followup.kind === 'command' && followup.when && !this.contextService.contextMatchesRules(ContextKeyExpr.deserialize(followup.when))) {
            return;
        }
        const tooltip = 'tooltip' in followup ? followup.tooltip : undefined;
        const button = this._register(( new Button(container, { ...this.options, supportIcons: true, title: tooltip })));
        if (followup.kind === 'reply') {
            button.element.classList.add('interactive-followup-reply');
        }
        else if (followup.kind === 'command') {
            button.element.classList.add('interactive-followup-command');
        }
        const label = followup.kind === 'reply' ?
            '$(sparkle) ' + (followup.title || followup.message) :
            followup.title;
        button.label = ( new MarkdownString(label, { supportThemeIcons: true }));
        this._register(button.onDidClick(() => this.clickHandler(followup)));
    }
}
export { ChatFollowups };
