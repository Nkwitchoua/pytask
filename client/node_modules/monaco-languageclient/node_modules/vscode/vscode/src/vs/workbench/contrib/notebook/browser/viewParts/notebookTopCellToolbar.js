import { __decorate, __param } from '../../../../../../../../external/tslib/tslib.es6.js';
import * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';
import { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { MenuWorkbenchToolBar } from 'monaco-editor/esm/vs/platform/actions/browser/toolbar.js';
import { MenuItemAction, IMenuService } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { CodiconActionViewItem } from '../view/cellParts/cellActionView.js';
let ListTopCellToolbar = class ListTopCellToolbar extends Disposable {
    constructor(notebookEditor, contextKeyService, insertionIndicatorContainer, instantiationService, contextMenuService, menuService) {
        super();
        this.notebookEditor = notebookEditor;
        this.instantiationService = instantiationService;
        this.contextMenuService = contextMenuService;
        this.menuService = menuService;
        this._modelDisposables = this._register(( new DisposableStore()));
        this.topCellToolbar = dom.append(insertionIndicatorContainer, dom.$('.cell-list-top-cell-toolbar-container'));
        this.toolbar = this._register(instantiationService.createInstance(MenuWorkbenchToolBar, this.topCellToolbar, this.notebookEditor.creationOptions.menuIds.cellTopInsertToolbar, {
            actionViewItemProvider: action => {
                if (action instanceof MenuItemAction) {
                    const item = this.instantiationService.createInstance(CodiconActionViewItem, action, undefined);
                    return item;
                }
                return undefined;
            },
            menuOptions: {
                shouldForwardArgs: true
            },
            toolbarOptions: {
                primaryGroup: (g) => /^inline/.test(g),
            },
            hiddenItemStrategy: 0 ,
        }));
        this.toolbar.context = {
            notebookEditor
        };
        this._register(this.notebookEditor.onDidChangeModel(() => {
            this._modelDisposables.clear();
            if (this.notebookEditor.hasModel()) {
                this._modelDisposables.add(this.notebookEditor.onDidChangeViewCells(() => {
                    this.updateClass();
                }));
                this.updateClass();
            }
        }));
        this.updateClass();
    }
    updateClass() {
        if (this.notebookEditor.hasModel() && this.notebookEditor.getLength() === 0) {
            this.topCellToolbar.classList.add('emptyNotebook');
        }
        else {
            this.topCellToolbar.classList.remove('emptyNotebook');
        }
    }
};
ListTopCellToolbar = ( __decorate([
    ( __param(3, IInstantiationService)),
    ( __param(4, IContextMenuService)),
    ( __param(5, IMenuService))
], ListTopCellToolbar));
export { ListTopCellToolbar };
