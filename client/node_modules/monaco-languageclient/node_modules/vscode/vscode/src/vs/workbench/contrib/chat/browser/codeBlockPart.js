import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import './codeBlockPart.css.js';
import * as dom from 'monaco-editor/esm/vs/base/browser/dom.js';
import { Emitter } from 'monaco-editor/esm/vs/base/common/event.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { Button } from 'monaco-editor/esm/vs/base/browser/ui/button/button.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { EditorExtensionsRegistry } from 'monaco-editor/esm/vs/editor/browser/editorExtensions.js';
import { CodeEditorWidget } from 'monaco-editor/esm/vs/editor/browser/widget/codeEditorWidget.js';
import { EDITOR_FONT_DEFAULTS } from 'monaco-editor/esm/vs/editor/common/config/editorOptions.js';
import { Range } from 'monaco-editor/esm/vs/editor/common/core/range.js';
import { ILanguageService } from 'monaco-editor/esm/vs/editor/common/languages/language.js';
import { PLAINTEXT_LANGUAGE_ID } from 'monaco-editor/esm/vs/editor/common/languages/modesRegistry.js';
import { IModelService } from 'monaco-editor/esm/vs/editor/common/services/model.js';
import { BracketMatchingController } from 'monaco-editor/esm/vs/editor/contrib/bracketMatching/browser/bracketMatching.js';
import { ContextMenuController } from 'monaco-editor/esm/vs/editor/contrib/contextmenu/browser/contextmenu.js';
import { ViewportSemanticTokensContribution } from 'monaco-editor/esm/vs/editor/contrib/semanticTokens/browser/viewportSemanticTokens.js';
import { SmartSelectController } from 'monaco-editor/esm/vs/editor/contrib/smartSelect/browser/smartSelect.js';
import { WordHighlighterContribution } from 'monaco-editor/esm/vs/editor/contrib/wordHighlighter/browser/wordHighlighter.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { IAccessibilityService } from 'monaco-editor/esm/vs/platform/accessibility/common/accessibility.js';
import { MenuWorkbenchToolBar } from 'monaco-editor/esm/vs/platform/actions/browser/toolbar.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { ServiceCollection } from 'monaco-editor/esm/vs/platform/instantiation/common/serviceCollection.js';
import { isResponseVM } from '../common/chatViewModel.js';
import { MenuPreventer } from '../../codeEditor/browser/menuPreventer.js';
import { SelectionClipboardContributionID } from '../../codeEditor/browser/selectionClipboard.js';
import { getSimpleEditorOptions } from '../../codeEditor/browser/simpleEditorOptions.js';
const $ = dom.$;
const defaultCodeblockPadding = 10;
let CodeBlockPart = class CodeBlockPart extends Disposable {
    constructor(options, menuId, instantiationService, contextKeyService, languageService, modelService, configurationService, accessibilityService) {
        super();
        this.options = options;
        this.menuId = menuId;
        this.languageService = languageService;
        this.modelService = modelService;
        this.configurationService = configurationService;
        this.accessibilityService = accessibilityService;
        this._onDidChangeContentHeight = this._register(( new Emitter()));
        this.onDidChangeContentHeight = this._onDidChangeContentHeight.event;
        this.currentScrollWidth = 0;
        this.element = $('.interactive-result-code-block');
        this.contextKeyService = this._register(contextKeyService.createScoped(this.element));
        const scopedInstantiationService = instantiationService.createChild(( new ServiceCollection([IContextKeyService, this.contextKeyService])));
        const editorElement = dom.append(this.element, $('.interactive-result-editor'));
        this.editor = this._register(scopedInstantiationService.createInstance(CodeEditorWidget, editorElement, {
            ...getSimpleEditorOptions(this.configurationService),
            readOnly: true,
            lineNumbers: 'off',
            selectOnLineNumbers: true,
            scrollBeyondLastLine: false,
            lineDecorationsWidth: 8,
            dragAndDrop: false,
            padding: { top: defaultCodeblockPadding, bottom: defaultCodeblockPadding },
            mouseWheelZoom: false,
            scrollbar: {
                alwaysConsumeMouseWheel: false
            },
            ariaLabel: ( localizeWithPath(
                'vs/workbench/contrib/chat/browser/codeBlockPart',
                'chat.codeBlockHelp',
                'Code block'
            )),
            ...this.getEditorOptionsFromConfig()
        }, {
            isSimpleWidget: true,
            contributions: EditorExtensionsRegistry.getSomeEditorContributions([
                MenuPreventer.ID,
                SelectionClipboardContributionID,
                ContextMenuController.ID,
                WordHighlighterContribution.ID,
                ViewportSemanticTokensContribution.ID,
                BracketMatchingController.ID,
                SmartSelectController.ID,
            ])
        }));
        const toolbarElement = dom.append(this.element, $('.interactive-result-code-block-toolbar'));
        const editorScopedService = this.editor.contextKeyService.createScoped(toolbarElement);
        const editorScopedInstantiationService = scopedInstantiationService.createChild(( new ServiceCollection([IContextKeyService, editorScopedService])));
        this.toolbar = this._register(editorScopedInstantiationService.createInstance(MenuWorkbenchToolBar, toolbarElement, menuId, {
            menuOptions: {
                shouldForwardArgs: true
            }
        }));
        const vulnsContainer = dom.append(this.element, $('.interactive-result-vulns'));
        const vulnsHeaderElement = dom.append(vulnsContainer, $('.interactive-result-vulns-header', undefined));
        this.vulnsButton = ( new Button(vulnsHeaderElement, {
            buttonBackground: undefined,
            buttonBorder: undefined,
            buttonForeground: undefined,
            buttonHoverBackground: undefined,
            buttonSecondaryBackground: undefined,
            buttonSecondaryForeground: undefined,
            buttonSecondaryHoverBackground: undefined,
            buttonSeparator: undefined,
            supportIcons: true
        }));
        this.vulnsListElement = dom.append(vulnsContainer, $('ul.interactive-result-vulns-list'));
        this.vulnsButton.onDidClick(() => {
            const element = this.currentCodeBlockData.element;
            element.vulnerabilitiesListExpanded = !element.vulnerabilitiesListExpanded;
            this.vulnsButton.label = this.getVulnerabilitiesLabel();
            this.element.classList.toggle('chat-vulnerabilities-collapsed', !element.vulnerabilitiesListExpanded);
            this._onDidChangeContentHeight.fire();
        });
        this._register(this.toolbar.onDidChangeDropdownVisibility(e => {
            toolbarElement.classList.toggle('force-visibility', e);
        }));
        this._configureForScreenReader();
        this._register(this.accessibilityService.onDidChangeScreenReaderOptimized(() => this._configureForScreenReader()));
        this._register(this.configurationService.onDidChangeConfiguration((e) => {
            if (( e.affectedKeys.has(
                "accessibility.verbosity.panelChat"
            ))) {
                this._configureForScreenReader();
            }
        }));
        this._register(this.options.onDidChange(() => {
            this.editor.updateOptions(this.getEditorOptionsFromConfig());
        }));
        this._register(this.editor.onDidScrollChange(e => {
            this.currentScrollWidth = e.scrollWidth;
        }));
        this._register(this.editor.onDidContentSizeChange(e => {
            if (e.contentHeightChanged) {
                this._onDidChangeContentHeight.fire();
            }
        }));
        this._register(this.editor.onDidBlurEditorWidget(() => {
            this.element.classList.remove('focused');
            WordHighlighterContribution.get(this.editor)?.stopHighlighting();
        }));
        this._register(this.editor.onDidFocusEditorWidget(() => {
            this.element.classList.add('focused');
            WordHighlighterContribution.get(this.editor)?.restoreViewState(true);
        }));
        this.textModel = this._register(this.modelService.createModel('', null, undefined, true));
        this.editor.setModel(this.textModel);
    }
    focus() {
        this.editor.focus();
    }
    updatePaddingForLayout() {
        const horizontalScrollbarVisible = this.currentScrollWidth > this.editor.getLayoutInfo().contentWidth;
        const scrollbarHeight = this.editor.getLayoutInfo().horizontalScrollbarHeight;
        const bottomPadding = horizontalScrollbarVisible ?
            Math.max(defaultCodeblockPadding - scrollbarHeight, 2) :
            defaultCodeblockPadding;
        this.editor.updateOptions({ padding: { top: defaultCodeblockPadding, bottom: bottomPadding } });
    }
    _configureForScreenReader() {
        const toolbarElt = this.toolbar.getElement();
        if (this.accessibilityService.isScreenReaderOptimized()) {
            toolbarElt.style.display = 'block';
            toolbarElt.ariaLabel = this.configurationService.getValue("accessibility.verbosity.panelChat" ) ? ( localizeWithPath(
                'vs/workbench/contrib/chat/browser/codeBlockPart',
                'chat.codeBlock.toolbarVerbose',
                'Toolbar for code block which can be reached via tab'
            )) : ( localizeWithPath(
                'vs/workbench/contrib/chat/browser/codeBlockPart',
                'chat.codeBlock.toolbar',
                'Code block toolbar'
            ));
        }
        else {
            toolbarElt.style.display = '';
        }
    }
    getEditorOptionsFromConfig() {
        return {
            wordWrap: this.options.configuration.resultEditor.wordWrap,
            fontLigatures: this.options.configuration.resultEditor.fontLigatures,
            bracketPairColorization: this.options.configuration.resultEditor.bracketPairColorization,
            fontFamily: this.options.configuration.resultEditor.fontFamily === 'default' ?
                EDITOR_FONT_DEFAULTS.fontFamily :
                this.options.configuration.resultEditor.fontFamily,
            fontSize: this.options.configuration.resultEditor.fontSize,
            fontWeight: this.options.configuration.resultEditor.fontWeight,
            lineHeight: this.options.configuration.resultEditor.lineHeight,
        };
    }
    layout(width) {
        const realContentHeight = this.editor.getContentHeight();
        const editorBorder = 2;
        this.editor.layout({ width: width - editorBorder, height: realContentHeight });
        this.updatePaddingForLayout();
    }
    render(data, width) {
        this.currentCodeBlockData = data;
        if (data.parentContextKeyService) {
            this.contextKeyService.updateParent(data.parentContextKeyService);
        }
        if (this.options.configuration.resultEditor.wordWrap === 'on') {
            this.layout(width);
        }
        const text = this.fixCodeText(data.text, data.languageId);
        this.setText(text);
        const vscodeLanguageId = this.languageService.getLanguageIdByLanguageName(data.languageId) ?? undefined;
        this.setLanguage(vscodeLanguageId);
        this.layout(width);
        this.editor.updateOptions({ ariaLabel: ( localizeWithPath(
            'vs/workbench/contrib/chat/browser/codeBlockPart',
            'chat.codeBlockLabel',
            "Code block {0}",
            data.codeBlockIndex + 1
        )) });
        this.toolbar.context = {
            code: data.text,
            codeBlockIndex: data.codeBlockIndex,
            element: data.element,
            languageId: vscodeLanguageId
        };
        if (data.hideToolbar) {
            dom.hide(this.toolbar.getElement());
        }
        else {
            dom.show(this.toolbar.getElement());
        }
        if (data.vulns?.length && isResponseVM(data.element)) {
            dom.clearNode(this.vulnsListElement);
            this.element.classList.remove('no-vulns');
            this.element.classList.toggle('chat-vulnerabilities-collapsed', !data.element.vulnerabilitiesListExpanded);
            dom.append(this.vulnsListElement, ...( data.vulns.map(
                v => $('li', undefined, $('span.chat-vuln-title', undefined, v.title), ' ' + v.description)
            )));
            this.vulnsButton.label = this.getVulnerabilitiesLabel();
        }
        else {
            this.element.classList.add('no-vulns');
        }
    }
    getVulnerabilitiesLabel() {
        if (!this.currentCodeBlockData || !this.currentCodeBlockData.vulns) {
            return '';
        }
        const referencesLabel = this.currentCodeBlockData.vulns.length > 1 ?
            ( localizeWithPath(
                'vs/workbench/contrib/chat/browser/codeBlockPart',
                'vulnerabilitiesPlural',
                "{0} vulnerabilities",
                this.currentCodeBlockData.vulns.length
            )) :
            ( localizeWithPath(
                'vs/workbench/contrib/chat/browser/codeBlockPart',
                'vulnerabilitiesSingular',
                "{0} vulnerability",
                1
            ));
        const icon = (element) => element.vulnerabilitiesListExpanded ? Codicon.chevronDown : Codicon.chevronRight;
        return `${referencesLabel} $(${icon(this.currentCodeBlockData.element).id})`;
    }
    fixCodeText(text, languageId) {
        if (languageId === 'php') {
            if (!text.trim().startsWith('<')) {
                return `<?php\n${text}\n?>`;
            }
        }
        return text;
    }
    setText(newText) {
        const currentText = this.textModel.getValue(1 );
        if (newText === currentText) {
            return;
        }
        if (newText.startsWith(currentText)) {
            const text = newText.slice(currentText.length);
            const lastLine = this.textModel.getLineCount();
            const lastCol = this.textModel.getLineMaxColumn(lastLine);
            this.textModel.applyEdits([{ range: ( new Range(lastLine, lastCol, lastLine, lastCol)), text }]);
        }
        else {
            this.textModel.setValue(newText);
        }
    }
    setLanguage(vscodeLanguageId) {
        this.textModel.setLanguage(vscodeLanguageId ?? PLAINTEXT_LANGUAGE_ID);
    }
};
CodeBlockPart = ( __decorate([
    ( __param(2, IInstantiationService)),
    ( __param(3, IContextKeyService)),
    ( __param(4, ILanguageService)),
    ( __param(5, IModelService)),
    ( __param(6, IConfigurationService)),
    ( __param(7, IAccessibilityService))
], CodeBlockPart));
export { CodeBlockPart };
