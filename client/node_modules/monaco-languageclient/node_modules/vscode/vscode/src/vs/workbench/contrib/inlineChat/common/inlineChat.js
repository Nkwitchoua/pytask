import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { MenuId } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { Extensions as Extensions$1 } from 'monaco-editor/esm/vs/platform/configuration/common/configurationRegistry.js';
import { RawContextKey } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { Registry } from 'monaco-editor/esm/vs/platform/registry/common/platform.js';
import { registerColor, editorWidgetBackground, editorWidgetBorder, widgetShadow, editorHoverHighlight, focusBorder, inputPlaceholderForeground, inputBackground, transparent, diffInserted, diffRemoved } from 'monaco-editor/esm/vs/platform/theme/common/colorRegistry.js';
import { Extensions } from '../../../common/configuration.js';
const IInlineChatService = ( createDecorator('IInlineChatService'));
const INLINE_CHAT_ID = 'interactiveEditor';
const INTERACTIVE_EDITOR_ACCESSIBILITY_HELP_ID = 'interactiveEditorAccessiblityHelp';
const INLINE_CHAT_DECORATIONS_ID = 'interactiveEditorDecorations';
const CTX_INLINE_CHAT_HAS_PROVIDER = ( new RawContextKey('inlineChatHasProvider', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatHasProvider',
    "Whether a provider for interactive editors exists"
))));
const CTX_INLINE_CHAT_VISIBLE = ( new RawContextKey('inlineChatVisible', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatVisible',
    "Whether the interactive editor input is visible"
))));
const CTX_INLINE_CHAT_FOCUSED = ( new RawContextKey('inlineChatFocused', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatFocused',
    "Whether the interactive editor input is focused"
))));
const CTX_INLINE_CHAT_RESPONSE_FOCUSED = ( new RawContextKey('inlineChatResponseFocused', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatResponseFocused',
    "Whether the interactive widget's response is focused"
))));
const CTX_INLINE_CHAT_EMPTY = ( new RawContextKey('inlineChatEmpty', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatEmpty',
    "Whether the interactive editor input is empty"
))));
const CTX_INLINE_CHAT_INNER_CURSOR_FIRST = ( new RawContextKey('inlineChatInnerCursorFirst', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatInnerCursorFirst',
    "Whether the cursor of the iteractive editor input is on the first line"
))));
const CTX_INLINE_CHAT_INNER_CURSOR_LAST = ( new RawContextKey('inlineChatInnerCursorLast', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatInnerCursorLast',
    "Whether the cursor of the iteractive editor input is on the last line"
))));
const CTX_INLINE_CHAT_INNER_CURSOR_START = ( new RawContextKey('inlineChatInnerCursorStart', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatInnerCursorStart',
    "Whether the cursor of the iteractive editor input is on the start of the input"
))));
const CTX_INLINE_CHAT_INNER_CURSOR_END = ( new RawContextKey('inlineChatInnerCursorEnd', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatInnerCursorEnd',
    "Whether the cursor of the iteractive editor input is on the end of the input"
))));
const CTX_INLINE_CHAT_MESSAGE_CROP_STATE = ( new RawContextKey('inlineChatMarkdownMessageCropState', 'not_cropped', ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatMarkdownMessageCropState',
    "Whether the interactive editor message is cropped, not cropped or expanded"
))));
const CTX_INLINE_CHAT_OUTER_CURSOR_POSITION = ( new RawContextKey('inlineChatOuterCursorPosition', '', ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatOuterCursorPosition',
    "Whether the cursor of the outer editor is above or below the interactive editor input"
))));
const CTX_INLINE_CHAT_HAS_ACTIVE_REQUEST = ( new RawContextKey('inlineChatHasActiveRequest', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatHasActiveRequest',
    "Whether interactive editor has an active request"
))));
const CTX_INLINE_CHAT_HAS_STASHED_SESSION = ( new RawContextKey('inlineChatHasStashedSession', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatHasStashedSession',
    "Whether interactive editor has kept a session for quick restore"
))));
const CTX_INLINE_CHAT_LAST_RESPONSE_TYPE = ( new RawContextKey('inlineChatLastResponseType', undefined, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatResponseType',
    "What type was the last response of the current interactive editor session"
))));
const CTX_INLINE_CHAT_RESPONSE_TYPES = ( new RawContextKey('inlineChatResponseTypes', undefined, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatResponseTypes',
    "What type was the responses have been receieved"
))));
const CTX_INLINE_CHAT_DID_EDIT = ( new RawContextKey('inlineChatDidEdit', undefined, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatDidEdit',
    "Whether interactive editor did change any code"
))));
const CTX_INLINE_CHAT_USER_DID_EDIT = ( new RawContextKey('inlineChatUserDidEdit', undefined, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatUserDidEdit',
    "Whether the user did changes ontop of the inline chat"
))));
const CTX_INLINE_CHAT_LAST_FEEDBACK = ( new RawContextKey('inlineChatLastFeedbackKind', '', ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatLastFeedbackKind',
    "The last kind of feedback that was provided"
))));
const CTX_INLINE_CHAT_SUPPORT_ISSUE_REPORTING = ( new RawContextKey('inlineChatSupportIssueReporting', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatSupportIssueReporting',
    "Whether the interactive editor supports issue reporting"
))));
const CTX_INLINE_CHAT_DOCUMENT_CHANGED = ( new RawContextKey('inlineChatDocumentChanged', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatDocumentChanged',
    "Whether the document has changed concurrently"
))));
const CTX_INLINE_CHAT_CHANGE_HAS_DIFF = ( new RawContextKey('inlineChatChangeHasDiff', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatChangeHasDiff',
    "Whether the current change supports showing a diff"
))));
const CTX_INLINE_CHAT_CHANGE_SHOWS_DIFF = ( new RawContextKey('inlineChatChangeShowsDiff', false, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatChangeShowsDiff',
    "Whether the current change showing a diff"
))));
const CTX_INLINE_CHAT_EDIT_MODE = ( new RawContextKey('config.inlineChat.mode', "live" ));
const CTX_INLINE_CHAT_TOOLBAR_ICON_ENABLED = ( new RawContextKey('config.inlineChat.showToolbarIcon', false));
const ACTION_ACCEPT_CHANGES = 'interactive.acceptChanges';
const ACTION_REGENERATE_RESPONSE = 'inlineChat.regenerate';
const ACTION_VIEW_IN_CHAT = 'inlineChat.viewInChat';
const MENU_INLINE_CHAT_WIDGET = MenuId.for('inlineChatWidget');
const MENU_INLINE_CHAT_WIDGET_MARKDOWN_MESSAGE = MenuId.for('inlineChatWidget.markdownMessage');
const MENU_INLINE_CHAT_WIDGET_STATUS = MenuId.for('inlineChatWidget.status');
const MENU_INLINE_CHAT_WIDGET_FEEDBACK = MenuId.for('inlineChatWidget.feedback');
const MENU_INLINE_CHAT_WIDGET_DISCARD = MenuId.for('inlineChatWidget.undo');
const MENU_INLINE_CHAT_WIDGET_TOGGLE = MenuId.for('inlineChatWidget.toggle');
registerColor('inlineChat.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChat.background',
    "Background color of the interactive editor widget"
)));
registerColor('inlineChat.border', { dark: editorWidgetBorder, light: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChat.border',
    "Border color of the interactive editor widget"
)));
registerColor('inlineChat.shadow', { dark: widgetShadow, light: widgetShadow, hcDark: widgetShadow, hcLight: widgetShadow }, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChat.shadow',
    "Shadow color of the interactive editor widget"
)));
const inlineChatRegionHighlight = registerColor('inlineChat.regionHighlight', { dark: editorHoverHighlight, light: editorHoverHighlight, hcDark: editorHoverHighlight, hcLight: editorHoverHighlight }, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChat.regionHighlight',
    "Background highlighting of the current interactive region. Must be transparent."
)), true);
registerColor('inlineChatInput.border', { dark: editorWidgetBorder, light: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatInput.border',
    "Border color of the interactive editor input"
)));
registerColor('inlineChatInput.focusBorder', { dark: focusBorder, light: focusBorder, hcDark: focusBorder, hcLight: focusBorder }, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatInput.focusBorder',
    "Border color of the interactive editor input when focused"
)));
registerColor('inlineChatInput.placeholderForeground', { dark: inputPlaceholderForeground, light: inputPlaceholderForeground, hcDark: inputPlaceholderForeground, hcLight: inputPlaceholderForeground }, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatInput.placeholderForeground',
    "Foreground color of the interactive editor input placeholder"
)));
registerColor('inlineChatInput.background', { dark: inputBackground, light: inputBackground, hcDark: inputBackground, hcLight: inputBackground }, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatInput.background',
    "Background color of the interactive editor input"
)));
const inlineChatDiffInserted = registerColor('inlineChatDiff.inserted', { dark: ( transparent(diffInserted, .5)), light: ( transparent(diffInserted, .5)), hcDark: ( transparent(diffInserted, .5)), hcLight: ( transparent(diffInserted, .5)) }, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatDiff.inserted',
    "Background color of inserted text in the interactive editor input"
)));
const inlineChatDiffRemoved = registerColor('inlineChatDiff.removed', { dark: ( transparent(diffRemoved, .5)), light: ( transparent(diffRemoved, .5)), hcDark: ( transparent(diffRemoved, .5)), hcLight: ( transparent(diffRemoved, .5)) }, ( localizeWithPath(
    'vs/workbench/contrib/inlineChat/common/inlineChat',
    'inlineChatDiff.removed',
    "Background color of removed text in the interactive editor input"
)));
( Registry.as(Extensions.ConfigurationMigration)).registerConfigurationMigrations([{
        key: 'interactiveEditor.editMode', migrateFn: (value) => {
            return [['inlineChat.mode', { value: value }]];
        }
    }]);
( Registry.as(Extensions$1.Configuration)).registerConfiguration({
    id: 'editor',
    properties: {
        'inlineChat.mode': {
            description: ( localizeWithPath(
                'vs/workbench/contrib/inlineChat/common/inlineChat',
                'mode',
                "Configure if changes crafted in the interactive editor are applied directly to the document or are previewed first."
            )),
            default: "livePreview" ,
            type: 'string',
            enum: ["livePreview" , "preview" , "live" ],
            markdownEnumDescriptions: [
                ( localizeWithPath(
                    'vs/workbench/contrib/inlineChat/common/inlineChat',
                    'mode.livePreview',
                    "Changes are applied directly to the document and are highlighted visually via inline or side-by-side diffs. Ending a session will keep the changes."
                )),
                ( localizeWithPath(
                    'vs/workbench/contrib/inlineChat/common/inlineChat',
                    'mode.preview',
                    "Changes are previewed only and need to be accepted via the apply button. Ending a session will discard the changes."
                )),
                ( localizeWithPath(
                    'vs/workbench/contrib/inlineChat/common/inlineChat',
                    'mode.live',
                    "Changes are applied directly to the document but can be highlighted via inline diffs. Ending a session will keep the changes."
                )),
            ]
        },
        'inlineChat.showDiff': {
            description: ( localizeWithPath(
                'vs/workbench/contrib/inlineChat/common/inlineChat',
                'showDiff',
                "Enable/disable showing the diff when edits are generated. Works only with inlineChat.mode equal to live or livePreview."
            )),
            default: true,
            type: 'boolean'
        },
        'inlineChat.showGutterIcon': {
            description: ( localizeWithPath(
                'vs/workbench/contrib/inlineChat/common/inlineChat',
                'showGutterIcon',
                "Controls when the gutter icon for spawning inline chat is shown."
            )),
            default: "never" ,
            type: 'string',
            enum: ["always" , "mouseover" , "never" ],
            markdownEnumDescriptions: [
                ( localizeWithPath(
                    'vs/workbench/contrib/inlineChat/common/inlineChat',
                    'showGutterIcon.always',
                    "Always show the gutter icon."
                )),
                ( localizeWithPath(
                    'vs/workbench/contrib/inlineChat/common/inlineChat',
                    'showGutterIcon.mouseover',
                    "Show the gutter icon when the mouse is over the icon."
                )),
                ( localizeWithPath(
                    'vs/workbench/contrib/inlineChat/common/inlineChat',
                    'showGutterIcon.never',
                    "Never show the gutter icon."
                )),
            ]
        },
        'inlineChat.showToolbarIcon': {
            description: ( localizeWithPath(
                'vs/workbench/contrib/inlineChat/common/inlineChat',
                'showToolbarIcon',
                "Controls whether the toolbar icon spawning the inline chat is enabled."
            )),
            default: false,
            type: 'boolean'
        }
    }
});
export { ACTION_ACCEPT_CHANGES, ACTION_REGENERATE_RESPONSE, ACTION_VIEW_IN_CHAT, CTX_INLINE_CHAT_CHANGE_HAS_DIFF, CTX_INLINE_CHAT_CHANGE_SHOWS_DIFF, CTX_INLINE_CHAT_DID_EDIT, CTX_INLINE_CHAT_DOCUMENT_CHANGED, CTX_INLINE_CHAT_EDIT_MODE, CTX_INLINE_CHAT_EMPTY, CTX_INLINE_CHAT_FOCUSED, CTX_INLINE_CHAT_HAS_ACTIVE_REQUEST, CTX_INLINE_CHAT_HAS_PROVIDER, CTX_INLINE_CHAT_HAS_STASHED_SESSION, CTX_INLINE_CHAT_INNER_CURSOR_END, CTX_INLINE_CHAT_INNER_CURSOR_FIRST, CTX_INLINE_CHAT_INNER_CURSOR_LAST, CTX_INLINE_CHAT_INNER_CURSOR_START, CTX_INLINE_CHAT_LAST_FEEDBACK, CTX_INLINE_CHAT_LAST_RESPONSE_TYPE, CTX_INLINE_CHAT_MESSAGE_CROP_STATE, CTX_INLINE_CHAT_OUTER_CURSOR_POSITION, CTX_INLINE_CHAT_RESPONSE_FOCUSED, CTX_INLINE_CHAT_RESPONSE_TYPES, CTX_INLINE_CHAT_SUPPORT_ISSUE_REPORTING, CTX_INLINE_CHAT_TOOLBAR_ICON_ENABLED, CTX_INLINE_CHAT_USER_DID_EDIT, CTX_INLINE_CHAT_VISIBLE, IInlineChatService, INLINE_CHAT_DECORATIONS_ID, INLINE_CHAT_ID, INTERACTIVE_EDITOR_ACCESSIBILITY_HELP_ID, MENU_INLINE_CHAT_WIDGET, MENU_INLINE_CHAT_WIDGET_DISCARD, MENU_INLINE_CHAT_WIDGET_FEEDBACK, MENU_INLINE_CHAT_WIDGET_MARKDOWN_MESSAGE, MENU_INLINE_CHAT_WIDGET_STATUS, MENU_INLINE_CHAT_WIDGET_TOGGLE, inlineChatDiffInserted, inlineChatDiffRemoved, inlineChatRegionHighlight };
