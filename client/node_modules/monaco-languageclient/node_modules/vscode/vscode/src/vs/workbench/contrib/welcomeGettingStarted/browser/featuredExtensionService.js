import { __decorate, __param } from '../../../../../../../external/tslib/tslib.es6.js';
import { createDecorator } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { Disposable } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { IExtensionManagementService, IExtensionGalleryService } from '../../../../platform/extensionManagement/common/extensionManagement.js';
import { IProductService } from 'monaco-editor/esm/vs/platform/product/common/productService.js';
import { CancellationToken } from 'monaco-editor/esm/vs/base/common/cancellation.js';
import { IStorageService } from 'monaco-editor/esm/vs/platform/storage/common/storage.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { ExtensionIdentifier } from 'monaco-editor/esm/vs/platform/extensions/common/extensions.js';
import { IExtensionService } from '../../../services/extensions/common/extensions.js';
var FeaturedExtensionsService_1;
const IFeaturedExtensionsService = ( createDecorator('featuredExtensionsService'));
let FeaturedExtensionsService = class FeaturedExtensionsService extends Disposable {
    static { FeaturedExtensionsService_1 = this; }
    static { this.STORAGE_KEY = 'workbench.welcomePage.extensionMetadata'; }
    constructor(extensionManagementService, extensionService, storageService, productService, galleryService) {
        super();
        this.extensionManagementService = extensionManagementService;
        this.extensionService = extensionService;
        this.storageService = storageService;
        this.productService = productService;
        this.galleryService = galleryService;
        this.ignoredExtensions = ( new Set());
        this._isInitialized = false;
        this.title = ( localizeWithPath(
            'vs/workbench/contrib/welcomeGettingStarted/browser/featuredExtensionService',
            'gettingStarted.featuredTitle',
            'Recommended'
        ));
    }
    async getExtensions() {
        await this._init();
        const featuredExtensions = [];
        for (const extension of this.productService.featuredExtensions?.filter(e => !( this.ignoredExtensions.has(e.id))) ?? []) {
            const resolvedExtension = await this.resolveExtension(extension);
            if (resolvedExtension) {
                featuredExtensions.push(resolvedExtension);
            }
        }
        return featuredExtensions;
    }
    async _init() {
        if (this._isInitialized) {
            return;
        }
        const featuredExtensions = this.productService.featuredExtensions;
        if (!featuredExtensions) {
            this._isInitialized = true;
            return;
        }
        await this.extensionService.whenInstalledExtensionsRegistered();
        const installed = await this.extensionManagementService.getInstalled();
        for (const extension of featuredExtensions) {
            if (( installed.some(e => ExtensionIdentifier.equals(e.identifier.id, extension.id)))) {
                this.ignoredExtensions.add(extension.id);
            }
            else {
                let galleryExtension;
                try {
                    galleryExtension = (await this.galleryService.getExtensions([{ id: extension.id }], CancellationToken.None))[0];
                }
                catch (err) {
                    continue;
                }
                if (!(await this.extensionManagementService.canInstall(galleryExtension))) {
                    this.ignoredExtensions.add(extension.id);
                }
            }
        }
        this._isInitialized = true;
    }
    async resolveExtension(productMetadata) {
        const title = productMetadata.title ?? (await this.getMetadata(productMetadata.id, 0 ));
        const description = productMetadata.description ?? (await this.getMetadata(productMetadata.id, 1 ));
        const imagePath = productMetadata.imagePath ?? (await this.getMetadata(productMetadata.id, 2 ));
        if (title && description && imagePath) {
            return {
                id: productMetadata.id,
                title: title,
                description: description,
                imagePath: imagePath,
            };
        }
        return undefined;
    }
    async getMetadata(extensionId, key) {
        const storageMetadata = this.getStorageData(extensionId);
        if (storageMetadata) {
            switch (key) {
                case 0 : {
                    return storageMetadata.title;
                }
                case 1 : {
                    return storageMetadata.description;
                }
                case 2 : {
                    return storageMetadata.imagePath;
                }
                default:
                    return undefined;
            }
        }
        return await this.getGalleryMetadata(extensionId, key);
    }
    getStorageData(extensionId) {
        const metadata = this.storageService.get(FeaturedExtensionsService_1.STORAGE_KEY + '.' + extensionId, -1 );
        if (metadata) {
            const value = JSON.parse(metadata);
            const lastUpdateDate = ( new Date()).getTime() - value.date;
            if (lastUpdateDate < 1000 * 60 * 60 * 24 * 7) {
                return value;
            }
        }
        return undefined;
    }
    async getGalleryMetadata(extensionId, key) {
        const storageKey = FeaturedExtensionsService_1.STORAGE_KEY + '.' + extensionId;
        this.storageService.remove(storageKey, -1 );
        let metadata;
        let galleryExtension;
        try {
            galleryExtension = (await this.galleryService.getExtensions([{ id: extensionId }], CancellationToken.None))[0];
        }
        catch (err) {
        }
        if (!galleryExtension) {
            return metadata;
        }
        switch (key) {
            case 0 : {
                metadata = galleryExtension.displayName;
                break;
            }
            case 1 : {
                metadata = galleryExtension.description;
                break;
            }
            case 2 : {
                metadata = galleryExtension.assets.icon?.uri;
                break;
            }
        }
        this.storageService.store(storageKey, JSON.stringify({
            title: galleryExtension.displayName,
            description: galleryExtension.description,
            imagePath: galleryExtension.assets.icon?.uri,
            date: ( new Date()).getTime()
        }), -1 , 1 );
        return metadata;
    }
};
FeaturedExtensionsService = FeaturedExtensionsService_1 = ( __decorate([
    ( __param(0, IExtensionManagementService)),
    ( __param(1, IExtensionService)),
    ( __param(2, IStorageService)),
    ( __param(3, IProductService)),
    ( __param(4, IExtensionGalleryService))
], FeaturedExtensionsService));
export { FeaturedExtensionsService, IFeaturedExtensionsService };
