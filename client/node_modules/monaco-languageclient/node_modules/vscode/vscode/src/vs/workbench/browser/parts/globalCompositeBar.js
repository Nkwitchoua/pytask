import { __decorate, __param } from '../../../../../../external/tslib/tslib.es6.js';
import { append, $, clearNode, hide, show, addDisposableListener, EventType, EventHelper, getWindow } from 'monaco-editor/esm/vs/base/browser/dom.js';
import { StandardKeyboardEvent } from 'monaco-editor/esm/vs/base/browser/keyboardEvent.js';
import { StandardMouseEvent } from 'monaco-editor/esm/vs/base/browser/mouseEvent.js';
import { EventType as EventType$1 } from 'monaco-editor/esm/vs/base/browser/touch.js';
import { ActionBar } from 'monaco-editor/esm/vs/base/browser/ui/actionbar/actionbar.js';
import { Action } from 'monaco-editor/esm/vs/base/common/actions.js';
import { Codicon } from 'monaco-editor/esm/vs/base/common/codicons.js';
import { Disposable, DisposableStore } from 'monaco-editor/esm/vs/base/common/lifecycle.js';
import { ThemeIcon } from 'monaco-editor/esm/vs/base/common/themables.js';
import { isString } from 'monaco-editor/esm/vs/base/common/types.js';
import { localizeWithPath } from 'monaco-editor/esm/vs/nls.js';
import { createAndFillInActionBarActions } from 'monaco-editor/esm/vs/platform/actions/browser/menuEntryActionViewItem.js';
import { MenuId, IMenuService } from 'monaco-editor/esm/vs/platform/actions/common/actions.js';
import { IConfigurationService } from 'monaco-editor/esm/vs/platform/configuration/common/configuration.js';
import { IContextKeyService } from 'monaco-editor/esm/vs/platform/contextkey/common/contextkey.js';
import { IContextMenuService } from 'monaco-editor/esm/vs/platform/contextview/browser/contextView.js';
import { IInstantiationService } from 'monaco-editor/esm/vs/platform/instantiation/common/instantiation.js';
import { IKeybindingService } from 'monaco-editor/esm/vs/platform/keybinding/common/keybinding.js';
import { registerIcon } from 'monaco-editor/esm/vs/platform/theme/common/iconRegistry.js';
import { IThemeService } from 'monaco-editor/esm/vs/platform/theme/common/themeService.js';
import { CompositeBarAction, CompoisteBarActionViewItem } from './compositeBarActions.js';
import { GLOBAL_ACTIVITY_ID } from '../../common/activity.js';
import { ACTIVITY_BAR_BADGE_BACKGROUND, ACTIVITY_BAR_BADGE_FOREGROUND } from '../../common/theme.js';
import { NumberBadge, IActivityService } from '../../services/activity/common/activity.js';
import { IWorkbenchEnvironmentService } from '../../services/environment/common/environmentService.js';
import { IHoverService } from '../../services/hover/browser/hover.js';
import { IUserDataProfileService } from '../../services/userDataProfile/common/userDataProfile.js';
import { DEFAULT_ICON } from '../../services/userDataProfile/common/userDataProfileIcons.js';
let GlobalCompositeBar = class GlobalCompositeBar extends Disposable {
    static { this.ACCOUNTS_ICON = registerIcon('accounts-view-bar-icon', Codicon.account, ( localizeWithPath(
        'vs/workbench/browser/parts/globalCompositeBar',
        'accountsViewBarIcon',
        "Accounts icon in the view bar."
    ))); }
    constructor(contextMenuActionsProvider, colors, activityHoverOptions, configurationService, instantiationService) {
        super();
        this.contextMenuActionsProvider = contextMenuActionsProvider;
        this.colors = colors;
        this.activityHoverOptions = activityHoverOptions;
        this.instantiationService = instantiationService;
        this.globalActivityAction = this._register(( new Action(GLOBAL_ACTIVITY_ID)));
        this.element = document.createElement('div');
        const anchorAlignment = configurationService.getValue('workbench.sideBar.location') === 'left' ? 1  : 0 ;
        const anchorAxisAlignment = 1 ;
        this.globalActivityActionBar = this._register(( new ActionBar(this.element, {
            actionViewItemProvider: action => {
                if (action.id === GLOBAL_ACTIVITY_ID) {
                    return this.instantiationService.createInstance(GlobalActivityActionViewItem, this.contextMenuActionsProvider, { colors: this.colors, hoverOptions: this.activityHoverOptions }, anchorAlignment, anchorAxisAlignment);
                }
                throw new Error(`No view item for action '${action.id}'`);
            },
            orientation: 1 ,
            ariaLabel: ( localizeWithPath('vs/workbench/browser/parts/globalCompositeBar', 'manage', "Manage")),
            animated: false,
            preventLoopNavigation: true
        })));
        this.globalActivityActionBar.push(this.globalActivityAction);
    }
    create(parent) {
        parent.appendChild(this.element);
    }
    focus() {
        this.globalActivityActionBar.focus(true);
    }
    size() {
        return this.globalActivityActionBar.viewItems.length;
    }
    getContextMenuActions() {
        return [];
    }
};
GlobalCompositeBar = ( __decorate([
    ( __param(3, IConfigurationService)),
    ( __param(4, IInstantiationService))
], GlobalCompositeBar));
let AbstractGlobalActivityActionViewItem = class AbstractGlobalActivityActionViewItem extends CompoisteBarActionViewItem {
    constructor(menuId, action, options, contextMenuActionsProvider, anchorAlignment, anchorAxisAlignment, themeService, hoverService, menuService, contextMenuService, contextKeyService, configurationService, keybindingService, activityService) {
        super(action, { draggable: false, icon: true, hasPopup: true, ...options }, () => true, themeService, hoverService, configurationService, keybindingService);
        this.menuId = menuId;
        this.contextMenuActionsProvider = contextMenuActionsProvider;
        this.anchorAlignment = anchorAlignment;
        this.anchorAxisAlignment = anchorAxisAlignment;
        this.menuService = menuService;
        this.contextMenuService = contextMenuService;
        this.contextKeyService = contextKeyService;
        this.activityService = activityService;
        this.updateItemActivity();
        this._register(this.activityService.onDidChangeActivity(viewContainerOrAction => {
            if (isString(viewContainerOrAction) && viewContainerOrAction === this.compositeBarActionItem.id) {
                this.updateItemActivity();
            }
        }));
    }
    updateItemActivity() {
        const activities = this.activityService.getActivity(this.compositeBarActionItem.id);
        let activity = activities[0];
        if (activity) {
            const { badge, priority } = activity;
            if (badge instanceof NumberBadge && activities.length > 1) {
                const cumulativeNumberBadge = this.getCumulativeNumberBadge(activities, priority ?? 0);
                activity = { badge: cumulativeNumberBadge };
            }
        }
        this.action.activity = activity;
    }
    getCumulativeNumberBadge(activityCache, priority) {
        const numberActivities = activityCache.filter(activity => activity.badge instanceof NumberBadge && (activity.priority ?? 0) === priority);
        const number = numberActivities.reduce((result, activity) => { return result + activity.badge.number; }, 0);
        const descriptorFn = () => {
            return numberActivities.reduce((result, activity, index) => {
                result = result + activity.badge.getDescription();
                if (index < numberActivities.length - 1) {
                    result = `${result}\n`;
                }
                return result;
            }, '');
        };
        return ( new NumberBadge(number, descriptorFn));
    }
    render(container) {
        super.render(container);
        this._register(addDisposableListener(this.container, EventType.MOUSE_DOWN, async (e) => {
            EventHelper.stop(e, true);
            const isLeftClick = e?.button !== 2;
            if (isLeftClick) {
                this.run();
            }
        }));
        this._register(addDisposableListener(this.container, EventType.CONTEXT_MENU, async (e) => {
            const disposables = ( new DisposableStore());
            const actions = await this.resolveContextMenuActions(disposables);
            const event = ( new StandardMouseEvent(getWindow(this.container), e));
            this.contextMenuService.showContextMenu({
                getAnchor: () => event,
                getActions: () => actions,
                onHide: () => disposables.dispose()
            });
        }));
        this._register(addDisposableListener(this.container, EventType.KEY_UP, (e) => {
            const event = ( new StandardKeyboardEvent(e));
            if (event.equals(3 ) || event.equals(10 )) {
                EventHelper.stop(e, true);
                this.run();
            }
        }));
        this._register(addDisposableListener(this.container, EventType$1.Tap, (e) => {
            EventHelper.stop(e, true);
            this.run();
        }));
    }
    async resolveContextMenuActions(disposables) {
        return this.contextMenuActionsProvider();
    }
    async run() {
        const disposables = ( new DisposableStore());
        const menu = disposables.add(this.menuService.createMenu(this.menuId, this.contextKeyService));
        const actions = await this.resolveMainMenuActions(menu, disposables);
        this.contextMenuService.showContextMenu({
            getAnchor: () => this.label,
            anchorAlignment: this.anchorAlignment,
            anchorAxisAlignment: this.anchorAxisAlignment,
            getActions: () => actions,
            onHide: () => disposables.dispose(),
            menuActionOptions: { renderShortTitle: true },
        });
    }
    async resolveMainMenuActions(menu, _disposable) {
        const actions = [];
        createAndFillInActionBarActions(menu, { renderShortTitle: true }, { primary: [], secondary: actions });
        return actions;
    }
};
AbstractGlobalActivityActionViewItem = ( __decorate([
    ( __param(6, IThemeService)),
    ( __param(7, IHoverService)),
    ( __param(8, IMenuService)),
    ( __param(9, IContextMenuService)),
    ( __param(10, IContextKeyService)),
    ( __param(11, IConfigurationService)),
    ( __param(12, IKeybindingService)),
    ( __param(13, IActivityService))
], AbstractGlobalActivityActionViewItem));
let GlobalActivityActionViewItem = class GlobalActivityActionViewItem extends AbstractGlobalActivityActionViewItem {
    constructor(contextMenuActionsProvider, options, anchorAlignment, anchorAxisAlignment, userDataProfileService, themeService, hoverService, menuService, contextMenuService, contextKeyService, configurationService, environmentService, keybindingService, instantiationService, activityService) {
        const action = instantiationService.createInstance(CompositeBarAction, {
            id: GLOBAL_ACTIVITY_ID,
            name: ( localizeWithPath('vs/workbench/browser/parts/globalCompositeBar', 'manage', "Manage")),
            classNames: ThemeIcon.asClassNameArray(userDataProfileService.currentProfile.icon ? ThemeIcon.fromId(userDataProfileService.currentProfile.icon) : DEFAULT_ICON)
        });
        super(MenuId.GlobalActivity, action, options, contextMenuActionsProvider, anchorAlignment, anchorAxisAlignment, themeService, hoverService, menuService, contextMenuService, contextKeyService, configurationService, keybindingService, activityService);
        this.userDataProfileService = userDataProfileService;
        this._register(action);
        this._register(this.userDataProfileService.onDidChangeCurrentProfile(e => {
            action.compositeBarActionItem = {
                ...action.compositeBarActionItem,
                classNames: ThemeIcon.asClassNameArray(userDataProfileService.currentProfile.icon ? ThemeIcon.fromId(userDataProfileService.currentProfile.icon) : DEFAULT_ICON)
            };
        }));
    }
    render(container) {
        super.render(container);
        this.profileBadge = append(container, $('.profile-badge'));
        this.profileBadgeContent = append(this.profileBadge, $('.profile-badge-content'));
        this.updateProfileBadge();
    }
    updateProfileBadge() {
        if (!this.profileBadge || !this.profileBadgeContent) {
            return;
        }
        clearNode(this.profileBadgeContent);
        hide(this.profileBadge);
        if (this.userDataProfileService.currentProfile.isDefault) {
            return;
        }
        if (this.action.activity) {
            return;
        }
        if (!this.userDataProfileService.currentProfile.icon || this.userDataProfileService.currentProfile.icon === DEFAULT_ICON.id) {
            this.profileBadgeContent.classList.toggle('profile-text-overlay', true);
            this.profileBadgeContent.classList.toggle('profile-icon-overlay', false);
            this.profileBadgeContent.textContent = this.userDataProfileService.currentProfile.name.substring(0, 2).toUpperCase();
        }
        show(this.profileBadge);
    }
    updateActivity() {
        super.updateActivity();
        this.updateProfileBadge();
    }
    computeTitle() {
        return this.userDataProfileService.currentProfile.isDefault ? super.computeTitle() : ( localizeWithPath(
            'vs/workbench/browser/parts/globalCompositeBar',
            'manage profile',
            "Manage {0} (Profile)",
            this.userDataProfileService.currentProfile.name
        ));
    }
};
GlobalActivityActionViewItem = ( __decorate([
    ( __param(4, IUserDataProfileService)),
    ( __param(5, IThemeService)),
    ( __param(6, IHoverService)),
    ( __param(7, IMenuService)),
    ( __param(8, IContextMenuService)),
    ( __param(9, IContextKeyService)),
    ( __param(10, IConfigurationService)),
    ( __param(11, IWorkbenchEnvironmentService)),
    ( __param(12, IKeybindingService)),
    ( __param(13, IInstantiationService)),
    ( __param(14, IActivityService))
], GlobalActivityActionViewItem));
let SimpleGlobalActivityActionViewItem = class SimpleGlobalActivityActionViewItem extends GlobalActivityActionViewItem {
    constructor(hoverOptions, userDataProfileService, themeService, hoverService, menuService, contextMenuService, contextKeyService, configurationService, environmentService, keybindingService, instantiationService, activityService) {
        super(() => [], {
            colors: theme => ({
                badgeBackground: theme.getColor(ACTIVITY_BAR_BADGE_BACKGROUND),
                badgeForeground: theme.getColor(ACTIVITY_BAR_BADGE_FOREGROUND),
            }),
            hoverOptions,
            compact: true,
        }, undefined, undefined, userDataProfileService, themeService, hoverService, menuService, contextMenuService, contextKeyService, configurationService, environmentService, keybindingService, instantiationService, activityService);
    }
};
SimpleGlobalActivityActionViewItem = ( __decorate([
    ( __param(1, IUserDataProfileService)),
    ( __param(2, IThemeService)),
    ( __param(3, IHoverService)),
    ( __param(4, IMenuService)),
    ( __param(5, IContextMenuService)),
    ( __param(6, IContextKeyService)),
    ( __param(7, IConfigurationService)),
    ( __param(8, IWorkbenchEnvironmentService)),
    ( __param(9, IKeybindingService)),
    ( __param(10, IInstantiationService)),
    ( __param(11, IActivityService))
], SimpleGlobalActivityActionViewItem));
export { GlobalActivityActionViewItem, GlobalCompositeBar, SimpleGlobalActivityActionViewItem };
